#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Function prototypes
void initializeBoard(vector<vector<char>>& board);
void displayBoard(const vector<vector<char>>& board);
bool isMoveValid(const vector<vector<char>>& board, int row, int col);
bool checkWin(const vector<vector<char>>& board, char player);
bool checkDraw(const vector<vector<char>>& board);
void playGame();

int main() {
    char playAgain;
    do {
        playGame();
        cout << "Do you want to play again? (y/n): ";
        cin >> playAgain;
    } while (playAgain == 'y' || playAgain == 'Y');

    cout << "Thanks for playing Tic-Tac-Toe!\n";

    return 0;
}

void initializeBoard(vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i) {
        vector<char> row(3, ' ');
        board.push_back(row);
    }
}

void displayBoard(const vector<vector<char>>& board) {
    cout << "-------------\n";
    for (int i = 0; i < 3; ++i) {
        cout << "| ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << "\n-------------\n";
    }
}

bool isMoveValid(const vector<vector<char>>& board, int row, int col) {
    // Check if the cell is empty and within bounds
    return (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ');
}

bool checkWin(const vector<vector<char>>& board, char player) {
    // Check rows, columns, and diagonals for a win
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true; // Check rows
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true; // Check columns
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true; // Check diagonal
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true; // Check anti-diagonal
    return false;
}

bool checkDraw(const vector<vector<char>>& board) {
    // Check if all cells are filled
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') {
                return false; // There's an empty cell, game is not a draw
            }
        }
    }
    return true; // All cells are filled, it's a draw
}

void playGame() {
    vector<vector<char>> board;
    initializeBoard(board);
    bool xTurn = true; // true for 'X' and false for 'O'

    while (true) {
        // Display the board
        displayBoard(board);

        // Determine current player
        char currentPlayer = (xTurn) ? 'X' : 'O';
        cout << "Player " << currentPlayer << ", enter your move (row [1-3] column [1-3]): ";

        // Get player move
        int row, col;
        cin >> row >> col;
        row--; // Adjust to 0-based index
        col--; // Adjust to 0-based index

        // Check if the move is valid
        if (!isMoveValid(board, row, col)) {
            cout << "Invalid move! Try again.\n";
            continue;
        }

        // Update board with player's move
        board[row][col] = currentPlayer;

        // Check for win
        if (checkWin(board, currentPlayer)) {
            displayBoard(board);
            cout << "Player " << currentPlayer << " wins!\n";
            break;
        }

        // Check for draw
        if (checkDraw(board)) {
            displayBoard(board);
            cout << "It's a draw!\n";
            break;
        }

        // Switch players
        xTurn = !xTurn;
    }
}
