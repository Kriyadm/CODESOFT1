#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Structure to represent a task
struct Task {
    string description;
    bool completed;

    Task(string desc) : description(desc), completed(false) {}
};

// Function to add a new task to the list
void addTask(vector<Task> &tasks) {
    cout << "Enter task description: ";
    string description;
    getline(cin, description);

    Task newTask(description);
    tasks.push_back(newTask);

    cout << "Task added successfully!\n";
}

// Function to view all tasks
void viewTasks(const vector<Task> &tasks) {
    if (tasks.empty()) {
        cout << "No tasks to display.\n";
    } else {
        cout << "Tasks:\n";
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i].description << " - "
                 << (tasks[i].completed ? "Completed" : "Pending") << endl;
        }
    }
}

// Function to mark a task as completed
void markTaskCompleted(vector<Task> &tasks) {
    viewTasks(tasks); // Display current tasks first

    if (tasks.empty()) {
        return;
    }

    cout << "Enter the number of the task to mark as completed: ";
    size_t index;
    cin >> index;
    cin.ignore(); // Consume the newline character left in the stream

    if (index > 0 && index <= tasks.size()) {
        tasks[index - 1].completed = true;
        cout << "Task marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

// Function to remove a task from the list
void removeTask(vector<Task> &tasks) {
    viewTasks(tasks); // Display current tasks first

    if (tasks.empty()) {
        return;
    }

    cout << "Enter the number of the task to remove: ";
    size_t index;
    cin >> index;
    cin.ignore(); // Consume the newline character left in the stream

    if (index > 0 && index <= tasks.size()) {
        tasks.erase(tasks.begin() + index - 1);
        cout << "Task removed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

int main() {
    vector<Task> tasks;

    while (true) {
        cout << "\n======= To-Do List Manager =======\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;
        cin.ignore(); // Consume the newline character left in the stream

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markTaskCompleted(tasks);
                break;
            case 4:
                removeTask(tasks);
                break;
            case 5:
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice. Please enter a number from 1 to 5.\n";
                break;
        }
    }

    return 0;
}
